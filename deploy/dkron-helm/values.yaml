image:
    repository: dkron/dkron
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
    pullSecretName: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
    create: true
    annotations: {}
    name: ""

server:
    podLabels:
        app: dkron
        component: server
    replicaCount: 3
    extraArgs:
        - "--server"
        - "--bootstrap-expect=3"
        - '--retry-join provider=k8s label_selector="app=dkron,component=server"'
        - "--retry-join=dkron-server-0.dkron-server"
        - "--retry-join=dkron-server-1.dkron-server"
        - "--retry-join=dkron-server-2.dkron-server"
    log:
        level: "info"
    podAnnotations: {}
    podSecurityContext: {}
    securityContext: {}
    podManagementPolicy: Parallel
    updateStrategy:
        type: RollingUpdate
    statefulset:
        annotations:
            helm.sh/hook: post-install,post-upgrade
            helm.sh/hook-weight: "0"
    service:
        type: ClusterIP
        port: 80
        containerPort: 8080
        # ports:
        #     - port: 8946
        #       targetPort: 8946
        #     - port: 6868
        #       targetPort: 6868
        #     - port: 8080
        #       targetPort: 8080
    resources:
        limits:
            cpu: 500m
            memory: 2Gi
        requests:
            cpu: 250m
            memory: 1Gi
    autoscaling:
        enabled: false
    nodeSelector: {}
    tolerations: []
    affinity: {}
    persistence:
        enabled: true
        size: 1Gi

agent:
    podLabels:
        app: dkron
        component: agent
    replicaCount: 0
    extraArgs:
        - '--retry-join provider=k8s label_selector="app=dkron,component=server"'
        - "--retry-join=dkron-server-0.dkron-server"
        - "--retry-join=dkron-server-1.dkron-server"
        - "--retry-join=dkron-server-2.dkron-server"
    log:
        level: "info"
    deploymentAnnotations: {}
    podAnnotations: {}
    podSecurityContext: {}
    securityContext: {}
    podManagementPolicy: Parallel
    updateStrategy:
        type: RollingUpdate
    statefulset:
        annotations:
            helm.sh/hook: post-install,post-upgrade
            helm.sh/hook-weight: "1"
    resources:
        limits:
            cpu: 500m
            memory: 2Gi
        requests:
            cpu: 250m
            memory: 1Gi
    autoscaling:
        enabled: false
    nodeSelector: {}
    tolerations: []
    affinity: {}

envs: {}

# Additional service for external access
externalAccess:
    enabled: true
    service:
        type: LoadBalancer
        annotations:
            service.beta.kubernetes.io/azure-load-balancer-resource-group: dkron_resource_group
        ports:
            - port: 8080
              targetPort: 8080
jobs:
    - name: bootstrap-dkron
      annotations:
          helm.sh/hook: post-install,post-upgrade
          helm.sh/hook-weight: "1"
      spec:
          template:
              spec:
                  containers:
                      - name: bootstrap
                        image: curlimages/curl
                        command:
                            - "/bin/sh"
                            - "-c"
                            - |
                                until curl -s http://dkron-server-0.dkron-server:8080/v1/members | grep -q dkron-server-0; do
                                  echo "Waiting for dkron-server-0 to be ready..."
                                  sleep 5
                                done
                                echo "dkron-server-0 is ready. Cluster can now form."
                  restartPolicy: OnFailure
